{"version":3,"sources":["components/Question.js","constants.js","components/QuestionModal.js","components/Loader.js","api.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","styled","tr","_templateObject","Question","_ref","openQuestion","_ref$question","question","owner","title","creation_date","question_id","react_default","a","createElement","onClick","display_name","moment","format","LinkWrapper","div","QuestionModal_templateObject","QuestionModal","isOpen","body","onClose","link","reactstrap_es","size","href","dangerouslySetInnerHTML","__html","color","LoadingText","h2","Loader_templateObject","props","isCentered","Loader","getQuestions","page","axios","get","concat","params","site","order","pageSize","sort","filter","App","state","questions","pageNum","openedQuestionId","hasMore","_this$state","_this","then","_ref$data","data","fetchedQuestions","items","has_more","setState","Object","toConsumableArray","catch","alert","questionId","closeQuestion","this","_this2","_this$state2","find","length","xs","lib_default","dataLength","next","loader","Loader_Loader","hover","bordered","map","Question_Question","key","QuestionModal_QuestionModal","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9bdcb03.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport { DATE_FORMAT } from \"../constants\";\n\nconst TableRow = styled.tr`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nexport const Question = ({\n  openQuestion,\n  question: { owner, title, creation_date, question_id },\n}) => {\n  return (\n    <TableRow onClick={() => openQuestion(question_id)}>\n      <td>{owner.display_name}</td>\n      <td>{title}</td>\n      <td>{moment(creation_date * 1000).format(DATE_FORMAT)}</td>\n    </TableRow>\n  );\n};\n","export const DATE_FORMAT = \"MMMM Do YYYY, h:mm:ss a\";\n","import React from \"react\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\nimport styled from \"styled-components\";\n\nconst LinkWrapper = styled.div`\n  margin-bottom: 15px;\n`;\n\nexport const QuestionModal = ({ isOpen, title, body, onClose, link }) => (\n  <div>\n    <Modal size=\"lg\" isOpen={isOpen}>\n      <ModalHeader>{title}</ModalHeader>\n      <ModalBody>\n        <LinkWrapper>\n          Link: <a href={link}>{link}</a>\n        </LinkWrapper>\n        <div dangerouslySetInnerHTML={{ __html: body }} />\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={onClose}>\n          Close\n        </Button>\n      </ModalFooter>\n    </Modal>\n  </div>\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst LoadingText = styled.h2`\n  text-align: center;\n  ${props => props.isCentered &&\n    `\n    position: absolute;\n    top: 50%;\n    left 50%;\n    transform: translate(-50%, 50%);\n  `};\n`;\n\nexport const Loader = ({ isCentered }) => {\n  return (\n    <div>\n      <LoadingText isCentered={isCentered}>Loading...</LoadingText>\n    </div>\n  );\n};\n","import axios from \"axios\";\n\nconst API_URL = \"https://api.stackexchange.com/2.2/\";\n\nexport const getQuestions = (page) =>\n  axios.get(`${API_URL}/questions`, {\n    params: {\n      site: \"stackoverflow\",\n      page,\n      order: \"desc\",\n      pageSize: 20,\n      sort: \"creation\",\n      filter: 'withbody'\n    }\n  });\n\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Table } from \"reactstrap\";\nimport { Question } from \"./components/Question\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { QuestionModal } from \"./components/QuestionModal\";\nimport { Loader } from \"./components/Loader\";\nimport { getQuestions } from \"./api\";\n\nclass App extends Component {\n  state = {\n    questions: [],\n    pageNum: 1,\n    openedQuestionId: null,\n    hasMore: true\n  };\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    const { pageNum, questions } = this.state;\n    getQuestions(pageNum)\n      .then(({ data: { items: fetchedQuestions, has_more } }) => {\n        this.setState({\n          questions: [...questions, ...fetchedQuestions],\n          pageNum: pageNum + 1,\n          hasMore: has_more\n        });\n      })\n      .catch(() => alert(\"error loading data!\"));\n  };\n\n  openQuestion = questionId => {\n    this.setState({ openedQuestionId: questionId });\n  };\n\n  closeQuestion = () => {\n    this.setState({ openedQuestionId: null });\n  };\n\n  render() {\n    const { questions, hasMore, openedQuestionId } = this.state;\n    const openQuestion = questions.find(\n      question => question.question_id === openedQuestionId\n    );\n\n    return (\n      <Container>\n        {questions.length ? (\n          <Row>\n            <Col xs={12}>\n              <InfiniteScroll\n                dataLength={questions.length}\n                next={this.getQuestions}\n                hasMore={hasMore}\n                loader={<Loader />}\n              >\n                <Table hover bordered>\n                  <thead>\n                    <tr>\n                      <th>Author</th>\n                      <th>Title</th>\n                      <th>Creation date</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {questions.map(question => (\n                      <Question\n                        key={question.question_id}\n                        openQuestion={this.openQuestion}\n                        question={question}\n                      />\n                    ))}\n                  </tbody>\n                </Table>\n              </InfiniteScroll>\n            </Col>\n          </Row>\n        ) : (\n          <Loader isCentered />\n        )}\n        {openedQuestionId && (\n          <QuestionModal\n            title={openQuestion.title}\n            body={openQuestion.body}\n            link={openQuestion.link}\n            isOpen={!!openedQuestionId}\n            onClose={this.closeQuestion}\n          />\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}